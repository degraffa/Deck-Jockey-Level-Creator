{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["GenreSelect","props","changeGenre","event","setState","genre","target","value","state","id","style","display","this","onChange","React","Component","CardForm","removeCard","removed","pointsPerLoop","difficulty","loopName","isRemoved","cardIdx","type","width","textAlign","onClick","RecipeForm","console","log","genre0","genres","genre1","genre2","barPoints","barPoints0","barPoints1","barPoints2","recipeIdx","LevelForm","changeName","levelName","handleSubmit","preventDefault","alert","addCard","numCards","cards","length","push","addRecipe","numRecipes","recipes","levelTimer","onSubmit","changeTimer","map","card","recipe","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8b488d24.chunk.js","sourcesContent":["import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nclass GenreSelect extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      genre: props.genre\n    }\n  }\n\n  changeGenre = (event) => {\n    this.setState({genre: event.target.value});\n  }\n\n  render() {\n    return (\n      <div id=\"recipe\" style={{display: \"inline\"}}>\n        <select value={this.state.genre} onChange={this.changeGenre}>\n          <option value=\"ROCK\">ROCK</option>\n          <option value=\"JAZZ\">JAZZ</option>\n          <option value=\"HIPHOP\">HIPHOP</option>\n          <option value=\"FOLK\">FOLK</option>\n          <option value=\"NONE\">NONE</option>\n        </select>\n      </div>\n    )\n  }\n}\n\nclass CardForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      genre: \"ROCK\",\n      pointsPerLoop: 0.0,\n      difficulty: 1,\n      loopName: \"funky\",\n      isRemoved: false\n    }\n  }\n\n  changeGenre = (event) => {\n    this.setState({genre: this.state.value});\n  }\n\n  removeCard = () => {\n    this.setState({removed: true});\n  }\n\n  render() {\n    if (this.state.isRemoved) {\n      return (<br />)\n    }\n    else {\n      return (\n        <div id=\"card\">\n          <label>Card #{this.props.cardIdx}: </label>\n\n          <label>Genre: </label>\n          <GenreSelect genre=\"ROCK\" />\n\n          <label> Points Per Loop: </label>\n          <input type=\"text\" value={this.state.pointsPerLoop} style={{width: 30, textAlign: \"center\"}} />\n          <label> Loop Multiplier: </label>\n          <input type=\"text\" value={this.state.pointsPerLoop} style={{width: 30, textAlign: \"center\"}} />\n          \n          <button type=\"button\" onClick={this.removeCard}>Remove Card</button>\n        </div>\n      )\n    }\n  }\n}\n\nclass RecipeForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    console.log(props.genre0);\n\n    this.state = {\n      genres: [props.genre0, props.genre1, props.genre2],\n      barPoints: [props.barPoints0, props.barPoints1, props.barPoints2]\n    }\n  }\n\n  render() {\n    return (\n      <div id=\"recipe\" style={{display: \"inline\"}}>\n        <label>Recipe #{this.props.recipeIdx}: </label>\n        <GenreSelect genre={this.state.genres[0]} />\n        <GenreSelect genre={this.state.genres[1]} />\n        <GenreSelect genre={this.state.genres[2]} />\n        \n        <br />\n      </div>\n    )\n  }\n}\n\nexport class LevelForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      levelName: \"Example Level\",\n      levelTimer: 0,\n      cards: [<CardForm cardIdx=\"1\" />],\n      recipes: [<RecipeForm recipeIdx = \"1\" genre0=\"JAZZ\" barPoints0=\"100\" genre1=\"HIPHOP\" barPoints1=\"100\"/>]\n    };\n  }\n\n  changeName = (event) => {\n    this.setState({levelName: event.target.value});\n  }\n\n  changeTimer(event) {\n    this.setState(this.state.levelTimer, event.target.value);\n  }\n  handleSubmit = (event) => {\n    event.preventDefault();\n    alert(\"\" + this.state.levelName);\n  }\n\n  addCard = () => {\n    let numCards = this.state.cards.length;\n    this.state.cards.push(<CardForm cardIdx={numCards+1} />);\n    this.setState({cards: this.state.cards});\n  }\n\n  addRecipe = () => {\n    let numRecipes = this.state.recipes.length;\n    this.state.recipes.push(<RecipeForm recipeIdx={numRecipes+1}/>);\n    this.setState({recipes: this.state.recipes});\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>Level Name: </label> \n        <input type=\"text\" value={this.state.levelName} onChange={this.changeName}/>\n        \n        <br />\n        <label>Level Timer: </label>\n        \n        <input type=\"text\" value={this.state.levelTimer} onChange={this.changeTimer}/>\n        <br />\n\n        <br />\n        <label> Cards </label> <button type=\"button\" onClick={this.addCard}>New Card</button>\n        <br />\n        <div id=\"cards\">\n          {this.state.cards.map(card => {\n            return(card);\n          })}\n        </div> \n\n        <br/>\n        <label>Recipes</label> <button type=\"button\" onClick={this.addRecipe}>New Recipe</button>\n        <br />\n        <div id=\"recipes\">\n            {this.state.recipes.map(recipe => {\n              return(recipe);\n            })}\n        </div> \n        <input type=\"submit\" value=\"Get Level JSON\" />\n      </form>\n    )\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n\n        <LevelForm />\n      </header>\n    </div>\n  );\n}\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}