{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["GenreSelect","props","changeGenre","event","setState","genre","target","value","state","id","style","display","class","this","parentClass","name","onChange","React","Component","CardForm","changePointsPerLoop","pointsPerLoop","changeLoopMultiplier","loopMultiplier","removeCard","difficulty","loopName","cardIdx","type","width","textAlign","onClick","RecipeForm","console","log","genre0","genres","genre1","genre2","barPoints","barPoints0","barPoints1","barPoints2","recipeIdx","removeRecipe","LevelForm","changeName","levelName","addCard","numCards","cards","length","push","addRecipe","numRecipes","recipes","formToJSON","form","levelJSON","levelNameInput","document","getElementsByName","levelTimerInput","levelTimer","Number","cardDivs","i","cardInputs","querySelectorAll","cardJSON","recipeDivs","recipeInputs","genre0Val","genre1Val","genre2Val","recipeJSON","JSON","stringify","handleSubmit","preventDefault","getElementById","json","onSubmit","changeTimer","map","card","recipe","height","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.73c11ad2.chunk.js","sourcesContent":["import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nclass GenreSelect extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      genre: props.genre\n    }\n  }\n\n  changeGenre = (event) => {\n    this.setState({genre: event.target.value});\n  }\n\n  render() {\n    return (\n      <div id=\"genre\" style={{display: \"inline\"}}>\n        <select class={this.props.parentClass} name=\"genre\" value={this.state.genre} onChange={this.changeGenre}>\n          <option value=\"NONE\">NONE</option>\n          <option value=\"ROCK\">ROCK</option>\n          <option value=\"JAZZ\">JAZZ</option>\n          <option value=\"HIPHOP\">HIPHOP</option>\n          <option value=\"FOLK\">FOLK</option>\n        </select>\n      </div>\n    )\n  }\n}\n\nclass CardForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      genre: \"NONE\",\n      pointsPerLoop: 0.0,\n      loopMultiplier: 0.0,\n      difficulty: 1,\n      loopName: \"funky\"\n    }\n  }\n\n  changePointsPerLoop = (event) => {\n    this.setState({pointsPerLoop: event.target.value});\n  }\n\n  changeLoopMultiplier = (event) => {\n    this.setState({loopMultiplier: event.target.value});\n  }\n\n  removeCard = () => {\n  }\n\n  render() {\n    return (\n      <div name=\"card-div\">\n        <label>Card #{this.props.cardIdx}: </label>\n\n        <label>Genre: </label>\n        <GenreSelect genre=\"NONE\" parentClass=\"card\"/>\n\n        <label> Points Per Loop: </label>\n        <input type=\"text\" name=\"pointsPerLoop\" value={this.state.pointsPerLoop} onChange={this.changePointsPerLoop} style={{width: 30, textAlign: \"center\"}} />\n        <label> Loop Multiplier: </label>\n        <input type=\"text\" name=\"loopMultiplier\" value={this.state.loopMultiplier} onChange={this.changeLoopMultiplier} style={{width: 30, textAlign: \"center\"}} />\n        <label> </label>\n        <button type=\"button\" onClick={this.removeCard}>Remove Card</button>\n      </div>\n    )\n  }\n}\n\nclass RecipeForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    console.log(props.genre0);\n\n    this.state = {\n      genres: [props.genre0, props.genre1, props.genre2],\n      barPoints: [props.barPoints0, props.barPoints1, props.barPoints2]\n    }\n  }\n\n  removeRecipe() {\n\n  }\n\n  render() {\n    return (\n      <div id=\"recipe\" name=\"recipe-div\" style={{display: \"inline\"}}>\n        <label>Recipe #{this.props.recipeIdx}: </label>\n        <label>Genres: 1: </label>\n        <GenreSelect genre={this.state.genres[0]} parentClass=\"recipe\"/>\n        <label> 2: </label>\n        <GenreSelect genre={this.state.genres[1]} parentClass=\"recipe\"/>\n        <label> 3: </label>\n        <GenreSelect genre={this.state.genres[2]} parentClass=\"recipe\"/>\n        <label> Points: 1: </label>\n        <input type=\"text\" class=\"recipe\" name=\"barPoints0\" value={this.state.barPoints[0]} style={{width: 30, textAlign: \"center\"}}></input>\n        <label> 2: </label>\n        <input type=\"text\" class=\"recipe\" name=\"barPoints1\" value={this.state.barPoints[1]} style={{width: 30, textAlign: \"center\"}}></input>\n        <label> 3: </label>\n        <input type=\"text\" class=\"recipe\" name=\"barPoints2\" value={this.state.barPoints[2]} style={{width: 30, textAlign: \"center\"}}></input>\n        <label> </label>\n        <button type=\"button\" onClick={this.removeRecipe}> Remove Recipe </button>\n        <br />\n      </div>\n    )\n  }\n}\n\nexport class LevelForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      levelName: \"Example Level\",\n      levelTimer: 0,\n      cards: [<CardForm cardIdx=\"1\" />],\n      recipes: [<RecipeForm recipeIdx = \"1\" genre0=\"JAZZ\" barPoints0=\"100\" genre1=\"HIPHOP\" barPoints1=\"100\" genre2=\"ROCK\" barPoints2=\"100\"/>]\n    };\n  }\n\n  changeName = (event) => {\n    this.setState({levelName: event.target.value});\n  }\n\n  changeTimer(event) {\n    this.setState(this.state.levelTimer, event.target.value);\n  }\n\n  addCard = () => {\n    let numCards = this.state.cards.length;\n    this.state.cards.push(<CardForm cardIdx={numCards+1} />);\n    this.setState({cards: this.state.cards});\n  }\n\n  addRecipe = () => {\n    let numRecipes = this.state.recipes.length;\n    this.state.recipes.push(<RecipeForm recipeIdx={numRecipes+1}/>);\n    this.setState({recipes: this.state.recipes});\n  }\n\n  // formToJSON = (elements) => [].reduce.call(elements, (data, element) => {\n  //   data[element.name] = element.value;\n  //   return data;\n  // }, {});\n\n  formToJSON = (form) => {\n    let levelJSON = {};\n    \n    // step 1: Level metadata\n    const levelNameInput = document.getElementsByName(\"levelName\")[0];\n    const levelTimerInput = document.getElementsByName(\"levelTimer\")[0];\n\n    levelJSON.levelName = levelNameInput.value;\n    levelJSON.levelTimer = Number(levelTimerInput.value);\n    levelJSON.cards = [];\n    levelJSON.recipes = [];\n\n    // step 2: Cards\n    const cardDivs = document.getElementsByName(\"card-div\");\n    for (let i = 0; i < cardDivs.length; i++) {\n      const cardDiv = cardDivs[i];\n      const cardInputs = cardDiv.querySelectorAll(\"input, select\");\n\n      // first is genre, second is pointsPerLoop, third is loopMultiplier\n      let genreVal = cardInputs[0].value;\n      let pointsPerLoopVal = Number(cardInputs[1].value);\n      let loopMultiplierVal = Number(cardInputs[2].value);\n\n      let cardJSON = {\n        genre: genreVal,\n        pointsPerLoop: pointsPerLoopVal,\n        loopMultiplier: loopMultiplierVal\n      };\n\n      levelJSON.cards.push(cardJSON);\n    }\n\n    // step 3: recipes\n    const recipeDivs = document.getElementsByName(\"recipe-div\");\n    for (let i = 0; i < recipeDivs.length; i++) {\n      const recipeDiv = recipeDivs[i];\n      const recipeInputs = recipeDiv.querySelectorAll(\"input, select\");\n\n      // first 3 are genre, last 3 are bar points\n      let genre0Val = recipeInputs[0].value;\n      let genre1Val = recipeInputs[1].value;\n      let genre2Val = recipeInputs[2].value;\n\n      let barPoints0Val = Number(recipeInputs[3].value);\n      let barPoints1Val = Number(recipeInputs[4].value);\n      let barPoints2Val = Number(recipeInputs[5].value);\n\n      let recipeJSON = {\n        genre0: genre0Val,\n        barPoints0: barPoints0Val,\n        genre1: genre1Val,\n        barPoints1: barPoints1Val,\n        genre2: genre2Val,\n        barPoints2: barPoints2Val\n      };\n\n      levelJSON.recipes.push(recipeJSON);\n    }\n\n    return JSON.stringify(levelJSON, null, \"  \");\n  }\n\n  handleSubmit = (event) => {\n    // stop form from reloading the page\n    event.preventDefault();\n\n    const form = document.getElementById(\"level-form\");\n\n    const json = this.formToJSON(form);\n\n    const jsonContainer = document.getElementById(\"json-textarea\");\n\n    jsonContainer.value = json;\n  }\n\n\n  render() {\n    return (\n      <div id=\"form-div\">\n        <form id=\"level-form\" onSubmit={this.handleSubmit}>\n          <label>Level Name: </label> \n          <input type=\"text\" name=\"levelName\" value={this.state.levelName} onChange={this.changeName}/>\n          \n          <br />\n          <label>Level Timer: </label>\n          \n          <input type=\"text\" name=\"levelTimer\" value={this.state.levelTimer} onChange={this.changeTimer}/>\n          <br />\n\n          <br />\n          <label> Cards </label> <button type=\"button\" onClick={this.addCard}>New Card</button>\n          <br />\n          <div id=\"cards\">\n            {this.state.cards.map(card => {\n              console.log(card);\n              return(card);\n            })}\n          </div> \n\n          <br/>\n          <label>Recipes</label> <button type=\"button\" onClick={this.addRecipe}>New Recipe</button>\n          <br />\n          <div id=\"recipes\">\n              {this.state.recipes.map(recipe => {\n                return(recipe);\n              })}\n          </div> \n\n          <br />\n          <br />\n          <input type=\"submit\" value=\"Get Level JSON\" />\n        </form>\n        <div id=\"json-text-div\">\n          <br />\n          <textarea id=\"json-textarea\" style={{\n            width: 500,\n            height: 500\n          }}>\n\n          </textarea>\n        </div>\n\n      </div>\n      \n    )\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n\n        <LevelForm />\n      </header>\n    </div>\n  );\n}\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}